on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: true
      project_file:
        type: string
        description: The path to the project file. (e.g. MyProject/MyProject.csproj, MySolution.sln)
        required: true
      project_version:
        type: string
        required: false
      runtime_platform:
        type: string
        required: false
        default: win-x64
      executable_file:
        type: string
        description: If this option is set, a setup file will be created for the executable file.
        required: false
jobs:
  main:
    runs-on: windows-latest
    name: Build .NET
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - id: info
        name: Get Version Information
        shell: pwsh
        run: |
          $version = ${{ inputs.project_version }}
          $dateVersion = Get-Date -Format yyyy.MM.dd
          $commitId = git rev-parse --short HEAD
          Write-Output "dateVersion=$dateVersion" >> $env:GITHUB_OUTPUT
          Write-Output "commitId=$commitId" >> $env:GITHUB_OUTPUT
          if ($version) {
            Write-Output "version=$version+$commitId" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "version=$dateVersion+$commitId" >> $env:GITHUB_OUTPUT
          }
      - name: Publish Project
        shell: pwsh
        run: |
          dotnet publish ${{ inputs.project_file }} --output build --runtime ${{ inputs.runtime_platform }} -p:Version=${{ steps.info.outputs.version }}
          $artifacts = (Get-ChildItem -Path build -Recurse).FullName
          New-Item -Path artifacts -ItemType Directory
          Compress-Archive -Path $artifacts -DestinationPath artifacts/${{ inputs.project_name }}_${{ inputs.runtime_platform }}.zip
      - name: Generate Setup File
        if: startsWith(inputs.runtime_platform, 'win') && inputs.executable_file
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri ${{ env.setup_script_url }} -OutFile setup.iss
          iscc `
            /O"${{ env.output_dir_name }}" `
            /F"${{ env.output_file_name }}" `
            /DName="${{ env.name }}" `
            /DVersion="${{ env.version }}" `
            /DFilesDirName="${{ env.files_dir_name }}" `
            /DExecutableFileName="${{ env.executable_file_name }}" `
            /DLicenseFileName="${{ env.license_file_name }}" `
            setup.iss
        env:
          setup_script_url: https://raw.githubusercontent.com/dentolos19/dentolos19/main/assets/setup.iss
          output_dir_name: artifacts
          output_file_name: ${{ inputs.project_name }}_${{ inputs.runtime_platform }}
          name: ${{ inputs.project_name }}
          version: ${{ steps.info.outputs.version }}
          files_dir_name: build
          executable_file_name: ${{ inputs.executable_file }}
          license_file_name: LICENSE
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ inputs.runtime_platform }}
          path: artifacts/*